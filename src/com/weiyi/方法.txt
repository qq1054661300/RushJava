JdkRegexpMethodPointcut 
@Scope("prototype")
    public JdkRegexpMethodPointcut druidStatPointcut() {
        JdkRegexpMethodPointcut pointcut = new JdkRegexpMethodPointcut();
        pointcut.setPatterns("com.qizhen.surveying_mark.service.*");
        return pointcut;
    }

//用于将"com.qizhen.surveying_mark.service.*"里的方法全都抽出

DruidStatInterceptor
public DruidStatInterceptor druidStatInterceptor() {
        DruidStatInterceptor dsInterceptor = new DruidStatInterceptor();
        return dsInterceptor;
    }

//方法拦截器，灵活的进行AOP配置

DefaultPointcutAdvisor
public DefaultPointcutAdvisor druidStatAdvisor(DruidStatInterceptor druidStatInterceptor, JdkRegexpMethodPointcut druidStatPointcut) {
        DefaultPointcutAdvisor defaultPointAdvisor = new DefaultPointcutAdvisor();
        defaultPointAdvisor.setPointcut(druidStatPointcut);
        defaultPointAdvisor.setAdvice(druidStatInterceptor);
        return defaultPointAdvisor;
    }

//自定义配置化的切点
authorizeRequests() //从上往下开始执行.anyRequest().authenticated();之后无法绕开token验证
antMatchers("/druid/**").permitAll()  //用于开放访问权限解除token验证但不会绕开过滤器
.anyRequest().authenticated();
http.logout()
                .logoutUrl("/authentication/logout")  //登出对应的地址
                .logoutSuccessHandler(new HttpStatusReturningLogoutSuccessHandler())  //登出成功后可以在这里处理自己的登出逻辑
                .and()
exceptionHandling() //用于统一处理Spring Security的异常
authenticationEntryPoint（） //当用户处理请求出现异常时，用来开启特定的认证流程
accessDeniedHandler（） //通过修改实现类来处理Ajax请求
addFilterBefore(new JwtAuthenticationFilter(authenticationManager()), UsernamePasswordAuthenticationFilter.class) //JWT拦截的过滤器的结尾